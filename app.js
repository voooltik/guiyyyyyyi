let places = [];
let selectedTags = new Set();
let route = [];
let currentStep = 0;
let stage = "map"; // "map" –∏–ª–∏ "info"
let mapInstance = null;
let tinderIndex = 0;
let currentPositionCoords = null; // —Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞

const categoryData = {
  "üñº –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ": {
    museum: "–ú—É–∑–µ–π",
    gallery: "–ì–∞–ª–µ—Ä–µ—è",
    history: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞",
    monument: "–ü–∞–º—è—Ç–Ω–∏–∫"
  },
  "üç¥ –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏": {
    restaurant: "–†–µ—Å—Ç–æ—Ä–∞–Ω",
    cafe: "–ö–∞—Ñ–µ",
    bar: "–ë–∞—Ä",
    streetfood: "–£–ª–∏—á–Ω–∞—è –µ–¥–∞"
  },
  "üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏ –º–æ–ª–æ–¥—ë–∂–Ω–æ–µ": {
    streetart: "–°—Ç—Ä–∏—Ç-–∞—Ä—Ç",
    instagram: "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–Ω—ã–µ –º–µ—Å—Ç–∞",
    loft: "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
    event: "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è / –≤—ã—Å—Ç–∞–≤–∫–∏",
    live: "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞"
  },
  "üö∂ –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏ –ø—Ä–æ–≥—É–ª–∫–∏": {
    park: "–ü–∞—Ä–∫",
    embankment: "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è",
    viewpoint: "–°–º–æ—Ç—Ä–æ–≤–∞—è",
    walk: "–ü–µ—à–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã",
    nature: "–ü—Ä–∏—Ä–æ–¥–∞"
  },
  "üë™ –î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ / —Å–µ–º—å–∏": {
    withkids: "–° –¥–µ—Ç—å–º–∏",
    date: "–î–ª—è —Å–≤–∏–¥–∞–Ω–∏—è",
    alone: "–î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫",
    group: "–î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"
  },
  "üõç –®–æ–ø–∏–Ω–≥ –∏ —Å—É–≤–µ–Ω–∏—Ä—ã": {
    market: "–†—ã–Ω–∫–∏",
    souvenir: "–°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –ª–∞–≤–∫–∏"
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä
function geocode(placeName) {
  return ymaps.geocode(placeName).then(res => {
    const firstGeoObject = res.geoObjects.get(0);
    if (!firstGeoObject) throw new Error('–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return firstGeoObject.geometry.getCoordinates(); // [lat, lon]
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
function initMapAndRoute(startCoords, endCoords) {
  if (mapInstance) mapInstance.destroy();

  mapInstance = new ymaps.Map("map", {
    center: startCoords,
    zoom: 14,
    controls: ['zoomControl', 'fullscreenControl']
  });

  const startPlacemark = new ymaps.Placemark(startCoords, {
    balloonContent: '–í—ã –∑–¥–µ—Å—å'
  }, {
    preset: 'islands#blueCircleIcon'
  });

  const endPlacemark = new ymaps.Placemark(endCoords, {
    balloonContent: '–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
  }, {
    preset: 'islands#redCircleIcon'
  });

  mapInstance.geoObjects.add(startPlacemark);
  mapInstance.geoObjects.add(endPlacemark);

  ymaps.route([startCoords, endCoords], {
    routingMode: 'pedestrian'
  }).then(route => {
    mapInstance.geoObjects.add(route);
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±–µ—Ä—ë–º bounds —É –º–∞—Ä—à—Ä—É—Ç–∞
    const bounds = route.getWayPoints().getBounds() || route.getPaths().getBounds();
    if (bounds) {
      mapInstance.setBounds(bounds, { checkZoomRange: true });
    }
  }).catch(err => {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç: ' + err.message);
  });
}

window.addEventListener("load", () => {
  const navButtons = {
    route: document.getElementById("nav-route"),
    promos: document.getElementById("nav-promos"),
    tinder: document.getElementById("nav-tinder"),
  };

  const sections = {
    main: document.getElementById("main-section"),
    route: document.getElementById("route-display"),
    promos: document.getElementById("promos"),
    tinder: document.getElementById("tinder-section"),
    placeInfo: document.getElementById("place-info"),
  };

  function resetNavigation() {
    Object.values(navButtons).forEach(b => b.classList.remove("active"));
  }

  Object.entries(navButtons).forEach(([key, btn]) => {
    btn.addEventListener("click", () => {
      Object.values(sections).forEach(s => s.style.display = "none");
      resetNavigation();
      btn.classList.add("active");

      if (key === "route") {
        if (route.length === 0) {
          // –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
          sections.main.style.display = "block";
          resetNavigation();
          navButtons.route.classList.remove("active");
          return;
        }
      }

      sections[key].style.display = "block";

      if (key === "tinder") {
        renderTinderCard();
        document.getElementById("tinder-card").style.display = "block";
        document.querySelector(".tinder-buttons").style.display = "flex";
        document.getElementById("back-to-main").style.display = "inline-block";
      }
    });
  });

  renderCategoryMenu();

  fetch("./places.json")
    .then(res => {
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ places.json");
      return res.json();
    })
    .then(data => {
      places = data;
      renderTinderCard();
    })
    .catch(err => {
      console.error(err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Å—Ç–∞");
      document.getElementById("tinder-card").textContent = "–ú–µ—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.";
    });

  document.getElementById("show-route").addEventListener("click", () => {
    if (selectedTags.size === 0) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.");
      return;
    }
    const ageFilter = document.getElementById("age").value;
    const duration = parseInt(document.getElementById("duration").value);
    const maxPlaces = duration * 2;
    const startPoint = document.getElementById("startInput").value.trim() || "–°–æ–≤–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å";

    route = places.filter(p =>
      p.tags.some(tag => selectedTags.has(tag)) &&
      (ageFilter === "all" || p.age === ageFilter || p.age === "all")
    ).slice(0, maxPlaces);

    if (route.length === 0) {
      alert("–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç.");
      return;
    }

    currentStep = 0;
    stage = "map";

    sections.main.style.display = "none";
    sections.route.style.display = "block";
    resetNavigation();
    navButtons.route.classList.add("active");

    geocode(startPoint)
      .then(startCoords => {
        currentPositionCoords = startCoords; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç
        initMapAndRoute(startCoords, route[currentStep].coordinates);
        showStep();
      })
      .catch(() => {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É. –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–æ–≤–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥—å.");
        currentPositionCoords = [57.6261, 39.8845];
        initMapAndRoute(currentPositionCoords, route[currentStep].coordinates);
        showStep();
      });
  });

  document.getElementById("back-from-place-info").addEventListener("click", () => {
    sections.placeInfo.style.display = "none";
    sections.route.style.display = "block";
  });

  document.getElementById("back-to-main").addEventListener("click", () => {
    sections.tinder.style.display = "none";
    sections.main.style.display = "block";
    resetNavigation();
    navButtons.route.classList.add("active");
  });

  function renderTinderCard() {
    const card = document.getElementById("tinder-card");
    if (!places.length) {
      card.textContent = "–ú–µ—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.";
      return;
    }
    if (tinderIndex >= places.length) {
      card.textContent = "–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç.";
      return;
    }
    const place = places[tinderIndex];
    card.innerHTML = `
      <h3>${place.name}</h3>
      <img src="${place.image}" alt="${place.name}" style="width:100%; border-radius:8px; margin-bottom:8px;" />
      <p>${place.description}</p>
    `;
  }

  document.getElementById("skip").addEventListener("click", () => {
    tinderIndex++;
    renderTinderCard();
  });

  document.getElementById("go").addEventListener("click", () => {
    if (!places.length || tinderIndex >= places.length) return;

    route = [places[tinderIndex]];
    currentStep = 0;
    stage = "map";

    sections.tinder.style.display = "none";
    sections.route.style.display = "block";

    resetNavigation();
    navButtons.route.classList.add("active");

    const startPoint = document.getElementById("startInput").value.trim() || "–°–æ–≤–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å";

    geocode(startPoint)
      .then(startCoords => {
        currentPositionCoords = startCoords;
        initMapAndRoute(startCoords, route[0].coordinates);
        showStep();
      })
      .catch(() => {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É. –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–æ–≤–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥—å.");
        currentPositionCoords = [57.6261, 39.8845];
        initMapAndRoute(currentPositionCoords, route[0].coordinates);
        showStep();
      });
  });

  function showStep() {
    const routeSection = document.getElementById("route-display");
    const infoSection = document.getElementById("place-info");
    const place = route[currentStep];

    if (stage === "map") {
      infoSection.style.display = "none";
      routeSection.style.display = "block";

      document.getElementById("route-progress").innerHTML = `<h2>${place.name}</h2>`;
      showButton("i-am-here", "–Ø —Ç—É—Ç", () => {
        stage = "info";
        showStep();
      });
    } else if (stage === "info") {
      routeSection.style.display = "none";
      infoSection.style.display = "block";

      document.getElementById("place-img").src = place.image;
      document.getElementById("place-name").textContent = place.name;
      document.getElementById("place-desc").textContent = place.description;

      document.getElementById("audio-btn").onclick = () => alert("–ê—É–¥–∏–æ–≥–∏–¥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.");

      const nextBtn = document.getElementById("next-place");
      nextBtn.style.display = "inline-block";
      nextBtn.onclick = () => {
        currentStep++;
        if (currentStep >= route.length) {
          finishRoute();
          return;
        }
        stage = "map";

        const prevPlace = route[currentStep - 1];
        const nextPlace = route[currentStep];

        // –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—Ç—É
        const startCoords = currentPositionCoords || prevPlace.coordinates;
        currentPositionCoords = nextPlace.coordinates;

        initMapAndRoute(startCoords, nextPlace.coordinates);
        showStep();
      };
    }
  }

  function showButton(id, text, onClick) {
    let btn = document.getElementById(id);
    if (!btn) {
      btn = document.createElement("button");
      btn.id = id;
      btn.style.marginTop = "10px";
      const container = document.getElementById("route-progress");
      container.appendChild(btn);
    }
    btn.textContent = text;
    btn.onclick = onClick;
    btn.style.display = "inline-block";
  }

  function finishRoute() {
    alert("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.");

    route = [];
    currentStep = 0;
    stage = "map";
    currentPositionCoords = null;

    sections.placeInfo.style.display = "none";
    sections.route.style.display = "none";
    sections.main.style.display = "block";

    resetNavigation();
    navButtons.route.classList.remove("active");

    selectedTags.clear();
    renderCategoryMenu();
  }

  function renderCategoryMenu() {
    const container = document.getElementById("categories");
    container.innerHTML = "";
    for (let [groupName, tags] of Object.entries(categoryData)) {
      const groupDiv = document.createElement("div");
      const toggleBtn = document.createElement("button");
      toggleBtn.type = "button";
      toggleBtn.className = "category-toggle";
      toggleBtn.textContent = groupName;

      const tagWrap = document.createElement("div");
      tagWrap.className = "tag-container";
      tagWrap.style.display = "none";

      toggleBtn.onclick = () => {
        tagWrap.style.display = tagWrap.style.display === "none" ? "grid" : "none";
      };

      for (let [tag, label] of Object.entries(tags)) {
        const tagEl = document.createElement("div");
        tagEl.className = "activity-circle";
        tagEl.dataset.tag = tag;
        tagEl.textContent = label;

        tagEl.onclick = () => {
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
            tagEl.classList.remove("selected");
          } else {
            selectedTags.add(tag);
            tagEl.classList.add("selected");
          }
        };

        tagWrap.appendChild(tagEl);
      }

      groupDiv.appendChild(toggleBtn);
      groupDiv.appendChild(tagWrap);
      container.appendChild(groupDiv);
    }
  }
});
