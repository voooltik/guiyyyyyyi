let places = [];
let selectedTags = new Set();
let route = [];
let currentStep = 0;
let stage = "map"; // "map" –∏–ª–∏ "info"
let mapInstance = null;
let tinderIndex = 0;
let routeStartTime = null;  // –î–ª—è —Ç–∞–π–º–µ—Ä–∞
let routeLengthMeters = 0;  // –î–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–∞

const categoryData = {
  "üñº –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ": {
    museum: "–ú—É–∑–µ–π",
    gallery: "–ì–∞–ª–µ—Ä–µ—è",
    history: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞",
    monument: "–ü–∞–º—è—Ç–Ω–∏–∫"
  },
  "üç¥ –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏": {
    restaurant: "–†–µ—Å—Ç–æ—Ä–∞–Ω",
    cafe: "–ö–∞—Ñ–µ",
    bar: "–ë–∞—Ä",
    streetfood: "–£–ª–∏—á–Ω–∞—è –µ–¥–∞"
  },
  "üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏ –º–æ–ª–æ–¥—ë–∂–Ω–æ–µ": {
    streetart: "–°—Ç—Ä–∏—Ç-–∞—Ä—Ç",
    instagram: "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–Ω—ã–µ –º–µ—Å—Ç–∞",
    loft: "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
    event: "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è / –≤—ã—Å—Ç–∞–≤–∫–∏",
    live: "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞"
  },
  "üö∂ –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –∏ –ø—Ä–æ–≥—É–ª–∫–∏": {
    park: "–ü–∞—Ä–∫",
    embankment: "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è",
    viewpoint: "–°–º–æ—Ç—Ä–æ–≤–∞—è",
    walk: "–ü–µ—à–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã",
    nature: "–ü—Ä–∏—Ä–æ–¥–∞"
  },
  "üë™ –î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ / —Å–µ–º—å–∏": {
    withkids: "–° –¥–µ—Ç—å–º–∏",
    date: "–î–ª—è —Å–≤–∏–¥–∞–Ω–∏—è",
    alone: "–î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫",
    group: "–î–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"
  },
  "üõç –®–æ–ø–∏–Ω–≥ –∏ —Å—É–≤–µ–Ω–∏—Ä—ã": {
    market: "–†—ã–Ω–∫–∏",
    souvenir: "–°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –ª–∞–≤–∫–∏"
  }
};

const DEFAULT_START = [57.6261, 39.8845]; // –°–æ–≤–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å

function geocode(placeName) {
  return ymaps.geocode(placeName).then(res => {
    const firstGeoObject = res.geoObjects.get(0);
    if (!firstGeoObject) throw new Error('–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return firstGeoObject.geometry.getCoordinates();
  });
}

function distanceBetweenCoords(coord1, coord2) {
  const R = 6371e3;
  const lat1 = coord1[0] * Math.PI / 180;
  const lat2 = coord2[0] * Math.PI / 180;
  const deltaLat = (coord2[0] - coord1[0]) * Math.PI / 180;
  const deltaLon = (coord2[1] - coord1[1]) * Math.PI / 180;

  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
            Math.cos(lat1) * Math.cos(lat2) *
            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  return R * c;
}

function renderRouteFromTo(startCoords, endCoords) {
  if (mapInstance) mapInstance.destroy();

  mapInstance = new ymaps.Map("map", {
    center: startCoords,
    zoom: 14,
    controls: ['zoomControl', 'fullscreenControl']
  });

  const startPlacemark = new ymaps.Placemark(startCoords, {
    balloonContent: '–í—ã –∑–¥–µ—Å—å'
  }, {
    preset: 'islands#blueCircleIcon'
  });

  const endPlacemark = new ymaps.Placemark(endCoords, {
    balloonContent: '–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
  }, {
    preset: 'islands#redCircleIcon'
  });

  mapInstance.geoObjects.add(startPlacemark);
  mapInstance.geoObjects.add(endPlacemark);

  ymaps.route([startCoords, endCoords], {
    routingMode: 'pedestrian'
  }).then(route => {
    mapInstance.geoObjects.add(route);
    if (typeof route.getBounds === 'function') {
      mapInstance.setBounds(route.getBounds(), { checkZoomRange: true });
    }
  }).catch(err => {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç: ' + err.message);
  });
}

function renderTinderCard() {
  const card = document.getElementById("tinder-card");
  if (!places.length) {
    card.textContent = "–ú–µ—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.";
    return;
  }
  if (tinderIndex >= places.length) {
    card.textContent = "–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç.";
    return;
  }
  const place = places[tinderIndex];
  card.innerHTML = `
    <h3>${place.name}</h3>
    <img src="${place.image}" alt="${place.name}" style="width:100%; border-radius:8px; margin-bottom:8px;" />
    <p>${place.description}</p>
  `;
}

function showStep() {
  const routeSection = document.getElementById("route-display");
  const infoSection = document.getElementById("place-info");
  const place = route[currentStep];

  if (stage === "map") {
    infoSection.style.display = "none";
    routeSection.style.display = "block";

    document.getElementById("route-progress").innerHTML = `<h2>${place.name}</h2>`;
    showButton("i-am-here", "–Ø —Ç—É—Ç", () => {
      stage = "info";
      showStep();
    });
  } else if (stage === "info") {
    routeSection.style.display = "none";
    infoSection.style.display = "block";

    document.getElementById("place-img").src = place.image;
    document.getElementById("place-name").textContent = place.name;
    document.getElementById("place-desc").textContent = place.description;

    document.getElementById("audio-btn").onclick = () => alert("–ê—É–¥–∏–æ–≥–∏–¥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.");

    const nextBtn = document.getElementById("next-place");
    nextBtn.style.display = "inline-block";
    nextBtn.onclick = () => {
      const prevPlace = route[currentStep];
      currentStep++;

      if (currentStep >= route.length) {
        finishRoute();
        return;
      }

      const nextPlace = route[currentStep];
      routeLengthMeters += distanceBetweenCoords(prevPlace.coordinates, nextPlace.coordinates);

      stage = "map";
      renderRouteFromTo(prevPlace.coordinates, nextPlace.coordinates);
      showStep();
    };
  }
}

function finishRoute() {
  const statsSection = document.getElementById("route-stats");
  const infoSection = document.getElementById("place-info");
  const routeSection = document.getElementById("route-display");

  const timeSpentMs = Date.now() - routeStartTime;
  const minutesSpent = Math.floor(timeSpentMs / 60000);

  if (route.length > 1 && currentStep === route.length) {
    let distSum = 0;
    for (let i = 0; i < route.length - 1; i++) {
      distSum += distanceBetweenCoords(route[i].coordinates, route[i + 1].coordinates);
    }
    routeLengthMeters = distSum;
  }

  infoSection.style.display = "none";
  routeSection.style.display = "none";
  statsSection.style.display = "block";

  statsSection.innerHTML = `
    <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—É–ª–∫–∏</h2>
    <p>–ü–æ—Å–µ—â–µ–Ω–æ –º–µ—Å—Ç: <b>${route.length}</b></p>
    <p>–û–±—â–∞—è –¥–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞: <b>${(routeLengthMeters / 1000).toFixed(2)} –∫–º</b></p>
    <p>–ü—Ä–æ–≥—É–ª–∫–∞ –∑–∞–Ω—è–ª–∞: <b>${minutesSpent} –º–∏–Ω—É—Ç</b></p>
    <p>–ü—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ): <b>${Math.round((routeLengthMeters / 1000) * 1300)}</b></p>
    <button id="start-new-route">–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç</button>
  `;

  document.getElementById("start-new-route").onclick = () => {
    statsSection.style.display = "none";
    document.getElementById("main-section").style.display = "block";
    selectedTags.clear();
    renderCategoryMenu();
  };

  route = [];
  currentStep = 0;
  routeStartTime = null;
  routeLengthMeters = 0;
}

function showButton(id, text, onClick) {
  let btn = document.getElementById(id);
  if (!btn) {
    btn = document.createElement("button");
    btn.id = id;
    btn.style.marginTop = "10px";
    document.getElementById("route-progress").appendChild(btn);
  }
  btn.textContent = text;
  btn.onclick = onClick;
  btn.style.display = "inline-block";
}
